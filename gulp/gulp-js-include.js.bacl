'use strict';
var gutil = require('gulp-util'),
    path = require('path'),
    fs = require('fs'),
    through = require('through2'),
    Buffer = require('buffer').Buffer,
    IMPORT_REGX = /\/\*#inport (['<])(.+)['>]\*\/[\r\n]*/g;

function searchIn(name, paths, inPaths, cwd) {
  var idx = inPaths? paths.length: 2, absPath;
  while (idx--) {
    if( (fs.existsSync(absPath = path.join(inPaths? paths[idx] : absPath, name) )) ) {
      return absPath;
    }
  }
}

var PluginError = function(message) {
  return new gutil.PluginError('gulp-js-include', message);
};

module.exports = function(paths) {
  var files = [];

  return through.obj(function(file, enc, callback) {
    if (file.isStream()) {
      this.emit('error', PluginError('Streaming not supported'));
      return callback();
    }

    try {
      var includePath, streanThis = this, includes = [],
          processed = file.contents.toString();

      while(IMPORT_REGX.test(processed)) {
        processed = processed.replace(IMPORT_REGX,function(line, type, src) {
          if( !(includePath = searchIn(src, paths, type == '<', file.base)) ) {
            streanThis.emit('error', PluginError('include "' + src + '" not found'));
            return callback();
          }

          if( !~includes.indexOf(includePath) ) {
            includes.push(includePath);
            return fs.readFileSync(includePath).toString() + gutil.linefeed;
          }
          return '';
        });
      }

      file.contents = new Buffer(processed);
      this.push(file)
    } catch(err) {
      this.emit('error', PluginError(err));
      return callback();
    }

    callback();
  });
};